// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Realizar login do usuário",
                "parameters": [
                    {
                        "description": "Dados para login do usuário",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserLoginPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens de acesso e refresh",
                        "schema": {
                            "$ref": "#/definitions/types.UserLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Validation errors for payload",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestStructResponse"
                        }
                    },
                    "404": {
                        "description": "No user found with the given email",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Atualizar tokens (Refresh Token)",
                "parameters": [
                    {
                        "description": "Payload contendo o refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RefreshTokenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Novos tokens de acesso e refresh",
                        "schema": {
                            "$ref": "#/definitions/types.UpdateRefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Validation errors for payload",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestStructResponse"
                        }
                    },
                    "401": {
                        "description": "Refresh token is invalid or has been expired",
                        "schema": {
                            "$ref": "#/definitions/types.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "No refresh token found with the given user ID",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/books": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Listar livros",
                "responses": {
                    "200": {
                        "description": "Lista de livros",
                        "schema": {
                            "$ref": "#/definitions/types.GetBooksResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Request canceled",
                        "schema": {
                            "$ref": "#/definitions/types.ContextCanceledResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Criar novo livro",
                "parameters": [
                    {
                        "description": "Dados do livro",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateBookPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID do novo livro",
                        "schema": {
                            "$ref": "#/definitions/types.CreateBookResponse"
                        }
                    },
                    "400": {
                        "description": "Validation errors for payload",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestStructResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Request canceled",
                        "schema": {
                            "$ref": "#/definitions/types.ContextCanceledResponse"
                        }
                    }
                }
            }
        },
        "/books/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Obter livro por ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do livro",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detalhes do livro",
                        "schema": {
                            "$ref": "#/definitions/types.Book"
                        }
                    },
                    "400": {
                        "description": "Book ID must be a positive integer",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "No book found with given ID",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Request canceled",
                        "schema": {
                            "$ref": "#/definitions/types.ContextCanceledResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Atualizar livro por ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do livro a ser atualizado",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados para atualização do livro",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateBookPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Livro atualizado",
                        "schema": {
                            "$ref": "#/definitions/types.Book"
                        }
                    },
                    "400": {
                        "description": "Validation errors for payload",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestStructResponse"
                        }
                    },
                    "404": {
                        "description": "No book found with given ID",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Request canceled",
                        "schema": {
                            "$ref": "#/definitions/types.ContextCanceledResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Excluir livro por ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID do livro a ser excluído",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Book ID must be a positive integer",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestResponse"
                        }
                    },
                    "404": {
                        "description": "No book found with given ID",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Request canceled",
                        "schema": {
                            "$ref": "#/definitions/types.ContextCanceledResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves user details based on the authenticated user's ID extracted from the request context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "responses": {
                    "200": {
                        "description": "User details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/types.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates user details based on the authenticated user's ID extracted from the request context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user by ID",
                "parameters": [
                    {
                        "description": "User update payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully updated",
                        "schema": {
                            "$ref": "#/definitions/types.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Criar um novo usuário",
                "parameters": [
                    {
                        "description": "Payload contendo os dados do novo usuário",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Usuário criado com sucesso",
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Validation errors for payload",
                        "schema": {
                            "$ref": "#/definitions/types.BadRequestStructResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected error occurred",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Request canceled",
                        "schema": {
                            "$ref": "#/definitions/types.ContextCanceledResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the user associated with the authenticated user's ID extracted from the request context.",
                "tags": [
                    "Users"
                ],
                "summary": "Delete user by ID",
                "responses": {
                    "204": {
                        "description": "User successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.InternalServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.BadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.BadRequestStructResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number_of_pages": {
                    "type": "integer"
                },
                "release_year": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.ContextCanceledResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.CreateBookPayload": {
            "type": "object",
            "required": [
                "author",
                "description",
                "genres",
                "image_url",
                "name",
                "number_of_pages",
                "release_year"
            ],
            "properties": {
                "author": {
                    "type": "string",
                    "minLength": 3
                },
                "description": {
                    "type": "string",
                    "minLength": 5
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "number_of_pages": {
                    "type": "integer",
                    "minimum": 1
                },
                "release_year": {
                    "type": "integer",
                    "maximum": 2099,
                    "minimum": 1500
                }
            }
        },
        "types.CreateBookResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "types.CreateUserRequestPayload": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "minLength": 8
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "minLength": 5
                }
            }
        },
        "types.CreateUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "types.GetBooksResponse": {
            "type": "object",
            "properties": {
                "books": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Book"
                    }
                }
            }
        },
        "types.InternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.NotFoundResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.RefreshTokenPayload": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "types.UnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.UpdateBookPayload": {
            "type": "object",
            "required": [
                "author",
                "description",
                "genres",
                "image_url",
                "name",
                "number_of_pages",
                "release_year"
            ],
            "properties": {
                "author": {
                    "type": "string",
                    "minLength": 3
                },
                "description": {
                    "type": "string",
                    "minLength": 5
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "number_of_pages": {
                    "type": "integer",
                    "minimum": 1
                },
                "release_year": {
                    "type": "integer",
                    "maximum": 2099,
                    "minimum": 1500
                }
            }
        },
        "types.UpdateRefreshTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "types.UpdateUserPayload": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "minLength": 5
                }
            }
        },
        "types.UserLoginPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "types.UserLoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "types.UserResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Book Store API",
	Description:      "API para gestão de livros",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
